m+=10 is faster than m = m + 10
a,c = 10,d //completely valid

//goto -> used to skip to a line in cpp , escaping out of nested for loops[as adding multiple break statements is not possible, 
            therefore goto is used to give extremely fast descisions] // always use goto in forward direction 

an overview of c :
1. c is a procedural language
2. c is a compiled language
3. c is a statically typed language
4. c is a general purpose language 

string function: 
1. strlen() -> returns the length of the string
2. strcpy() -> copies the string from one variable to another -> strcpy(str1,str2) where str1 is the pointer to the new string and str2 is the pointer to the string to be copied
3. strcat() -> concatenates the string
4.strcmp() -> compares the string   //returns 0 if equal


POINTERS:
THEY ARE USED TO STORE THE ADDRESS OF A VARIABLE, i.e they point to a variable.
void pointer can take any datatype value i.e it is a generic pointer can take int , flotat , char etc.
void pointer saves you memory , 
null pointer and void pointer are both different .

1.
/*const char* is a mutable pointer to an immutable character/string. This means that the pointer can point to 
any character or string variable or literal, 
but the value of that variable or literal cannot be changed through the pointer. For example: */

const char* p = "Hello"; // valid

2.
/* char* const is an immutable pointer to a mutable character/string. This means that the pointer cannot point to 
any other character or string variable or literal,
but the value of that variable or literal can be changed through the pointer. For example: */

char * const p = "Hello"; // valid where pointer p cannot point to any other character or string variable or literal, 
but the value of that variable or literal can be changed through the pointer.

3.
/* const char* const is an immutable pointer to an immutable character/string. 
This means that neither the pointer nor the value it points to can be changed. 
For example: */

const char* const p = "Hello"; // valid where neither the pointer nor the value it points to can be changed.


Linked list -> use vectors bro , they are better
1. singly linked list -> each node has a pointer to the next node
2. doubly linked list -> each node has a pointer to the next node and the previous node
3. circular linked list -> the last node points to the first node
forward point or backward point 


CONSTRUCTOR AND DESTRUCTOR:
        CONSTRUCTOR AND DESTRUCTOR ARE special members of the class defined by the user
        CONSTRUCTOR is used to initialize the object of the class
        DESTRUCTOR is called by the compiler when the object is destroyed
    
    -one constructor can call another constructor 
    -we can allocate memory within a constructor

        -> a constructor is supposed to do :
        1. it is supposed to return null
        2. constructor is used for initialize certain private members
        3. constructors can call other functions and other functions can call in constructors [genrally the functions are private and the constructors public]

    ->constructors cannot be virtual[a child can overwrite the parent perms granted]


    types of constructors:
    default constructor: has the same name as the class but no parameters it is called as soon as a class is initialized
    parameterized constructor: it takes parameters and whenever we call the class it uses the called values
    default constructors cannot be overloaded

    dynamic constructor- when memory is allocated to the data types at runtime 

    delegate-> can be used to split the components of constructors and distribute it to multiple constructors 

DESTRUCTOR: 
    it is called before the memory gets cleaned up 
    initializer list-> following the argument point(int x =0,int y=0)::(x=x y=y)
    

Friend functions:
    are functions that can access the public and private variables that are defined in the class while the function is outside the class.
    friend functions are not members of the class
    overloading operators are used to overload the operators like +,-,*,/ etc
    they are used to make the code more readable and easy to understand


static function:
    within a class can be used to access a static variable.


address of a r value-> you can get lvalue address by using 1 & , && can fetch the address of the rvalue if we assign it to something else , it is lost,